[
  {
    "slug": "building-my-personal-website",
    "title": "First Blog Post: How I Built This Website",
    "date": "2024-10-05",
    "excerpt": "A behind-the-scenes look at converting my static website to a modern Next.js application with automated deployment.",
    "tags": [
      "Next.js",
      "Web Development",
      "GitHub Pages"
    ],
    "content": "\nHey there!  \nI’ve been chewing on the idea of sprucing up my personal site for a while now. I wanted something that’s *easy to maintain*, *self‑hosted*, and—most importantly—able to host \na little blog where I can spill tech tips, random musings, and everything else that’s buzzing in my head. Since this is my very first post, I thought it’d be neat to give you \na quick rundown of how I actually built the site.\n\n---\n\n## Why a New Site?\n\nMy old site was a classic static page: a single HTML file, a handful of CSS rules, a splash of vanilla JavaScript. It worked, but every time I wanted to tweak a section or \nadd a new project, I’d end up digging through a maze of files. Plus, I was craving a blog. So, I set a goal: **an easy‑to‑maintain, self‑hosted website that feels fresh and \nmodern.**\n\n---\n\n## The Tech Stack\n\n| What | Why I chose it |\n|------|----------------|\n| **Next.js 14 (App Router)** | File‑based routing, zero configuration for static export, and great performance out of the box. |\n| **React Components** | Reusable UI pieces keep my code tidy and make future changes painless. |\n| **TypeScript** | Helps catch bugs early and keeps my codebase self‑documenting. |\n| **Bootstrap 5** | Keeps the responsive styling simple while letting me tweak a few variables for my own look. |\n| **Markdown for Content** | Writing in Markdown feels natural, and I can keep it version‑controlled in Git. |\n| **GitHub Pages + Actions** | Completely free hosting that rolls out every time I push to the `master` branch. |\n\n---\n\n## Architecture Overview\n\nThe code is organized in a component‑driven way. Every major page—Home, About,\nProjects, and Blog—has its own folder under `/app`, and each of those folders\ncontains small, reusable React components. The idea is that when I need to add a\nnew feature or tweak a section, I simply drop a component into the right place\nand the rest of the page pulls it in automatically.\n\nNext, I tell Next.js to export a pure static site by adding `output: 'export'`\nto `next.config.js`. That way the build process emits only HTML, CSS, and\nJavaScript, which GitHub Pages can serve without any server‑side magic.\n\nFor content, I use Markdown files stored in `/content`. A custom script\n(`scripts/generateContent.ts`) runs during the build. It walks through every\nMarkdown file, reads the frontmatter (title, date, tags), and converts the body\ninto a lightweight JSON object. Each category gets its own JSON file. At\nruntime, a component (`components/ContentLoader.tsx`) calls `getStaticProps` to\nfetch the appropriate JSON and passes the data down to the UI components,\nletting me keep the content separate from the markup.\n\nFinally, the whole deployment pipeline lives in GitHub Actions. Whenever I push\nto the `master` branch, the workflow runs `npm install`, builds the project with\n`npm run build`, then executes `npm run export`. The resulting static files in\nthe `out/` folder are automatically uploaded and deployed to GitHub Pages, so\nthere’s no manual upload step and no additional hosting configuration required.\n\nThe whole process is automatic—no manual uploads or server setup required.\n\n---\n\n## How I Keep Things Simple\n\n### Add a Post  \n  *Create a new `.md` file in `/content/blog`, add a title, date, and some Markdown. Commit & push.*  \n  The pipeline picks it up, generates JSON, and the next build publishes it.\n\n### Add a Project  \n  *Drop a `.md` file in `/content/projects`, optionally tag it with a year.*  \n  Projects are grouped by year on the Projects page.\n\n### Styling Tweaks  \n  Bootstrap variables in `styles/_variables.scss` let me adjust colors and spacing without touching the core library.\n\n\nThat’s the gist of how I turned a static landing page into a fully‑functional,\nself‑hosted blog powered by Next.js. Stay tuned for more posts—both about the\ntech and the things I’m learning along the way!\n\n"
  }
]