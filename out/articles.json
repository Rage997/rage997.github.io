[
  {
    "slug": "building-my-personal-website",
    "title": "First Blog Post: How I Built This Website",
    "date": "2024-10-05",
    "excerpt": "A behind-the-scenes look at converting my static website to a modern Next.js application with automated deployment.",
    "tags": [
      "Next.js",
      "Web Development",
      "GitHub Pages"
    ],
    "content": "<p>Hey there!<br />\nI’ve been chewing on the idea of sprucing up my personal site for a while now. I wanted something that’s <em>easy to maintain</em>, <em>self‑hosted</em>, and—most importantly—able to host \na little blog where I can spill tech tips, random musings, and everything else that’s buzzing in my head. Since this is my very first post, I thought it’d be neat to give you \na quick rundown of how I actually built the site.</p>\n<hr />\n<h2 id=\"whyanewsite\">Why a New Site?</h2>\n<p>My old site was a classic static page: a single HTML file, a handful of CSS rules, a splash of vanilla JavaScript. It worked, but every time I wanted to tweak a section or \nadd a new project, I’d end up digging through a maze of files. Plus, I was craving a blog. So, I set a goal: <strong>an easy‑to‑maintain, self‑hosted website that feels fresh and \nmodern.</strong></p>\n<hr />\n<h2 id=\"thetechstack\">The Tech Stack</h2>\n<p>| What | Why I chose it |\n|------|----------------|\n| <strong>Next.js 14 (App Router)</strong> | File‑based routing, zero configuration for static export, and great performance out of the box. |\n| <strong>React Components</strong> | Reusable UI pieces keep my code tidy and make future changes painless. |\n| <strong>TypeScript</strong> | Helps catch bugs early and keeps my codebase self‑documenting. |\n| <strong>Bootstrap 5</strong> | Keeps the responsive styling simple while letting me tweak a few variables for my own look. |\n| <strong>Markdown for Content</strong> | Writing in Markdown feels natural, and I can keep it version‑controlled in Git. |\n| <strong>GitHub Pages + Actions</strong> | Completely free hosting that rolls out every time I push to the <code>master</code> branch. |</p>\n<hr />\n<h2 id=\"architectureoverview\">Architecture Overview</h2>\n<ol>\n<li><p><strong>Component‑driven layout</strong><br />\nEach page (Home, About, Projects, Blog) lives in its own folder under <code>/app</code>. I split the UI into small, reusable components so I can drop a new piece in and it just \nworks.</p></li>\n<li><p><strong>Static Export</strong><br />\nIn <code>next.config.js</code> I added <code>output: 'export'</code>. That tells Next to spit out plain HTML, CSS, and JS files that GitHub Pages can serve.</p></li>\n<li><p><strong>Markdown ➜ JSON Build Pipeline</strong>  </p></li>\n</ol>\n<ul>\n<li>Build script (<code>scripts/generateContent.ts</code>):<br /><ul>\n<li>Reads every Markdown file under <code>/content</code>.  </li>\n<li>Parses the frontmatter (title, date, tags).  </li>\n<li>Outputs a lightweight JSON file per category.  </li></ul></li>\n<li>Runtime loader (<code>components/ContentLoader.tsx</code>):<br /><ul>\n<li>Uses <code>fetch</code> to grab the JSON at build time (via <code>getStaticProps</code>).  </li>\n<li>Passes the data down to the UI components.</li></ul></li>\n</ul>\n<ol>\n<li><strong>Deployment Pipeline</strong>  </li>\n</ol>\n<ul>\n<li><p>GitHub Actions (<code>.github/workflows/deploy.yml</code>):  </p>\n<ul>\n<li>Triggered on pushes to <code>master</code>.  </li>\n<li>Runs <code>npm install</code>, <code>npm run build</code>, then <code>npm run export</code>.  </li>\n<li>Uploads the <code>out/</code> folder to GitHub Pages.  </li></ul>\n<p>The whole process is automatic—no manual uploads or server setup required.</p></li>\n</ul>\n<hr />\n<h2 id=\"howikeepthingssimple\">How I Keep Things Simple</h2>\n<ul>\n<li><p><strong>Add a Post</strong><br />\n<em>Create a new <code>.md</code> file in <code>/content/blog</code>, add a title, date, and some Markdown. Commit & push.</em><br />\nThe pipeline picks it up, generates JSON, and the next build publishes it.</p></li>\n<li><p><strong>Add a Project</strong><br />\n<em>Drop a <code>.md</code> file in <code>/content/projects</code>, optionally tag it with a year.</em><br />\nProjects are grouped by year on the Projects page.</p></li>\n<li><p><strong>Styling Tweaks</strong><br />\nBootstrap variables in <code>styles/_variables.scss</code> let me adjust colors and spacing without touching the core library.</p></li>\n</ul>\n<hr />\n<h2 id=\"whatsnext\">What’s Next</h2>\n<ul>\n<li><strong>More dynamic content</strong>: Maybe pull in my GitHub repos or podcast episodes.  </li>\n<li><strong>Better SEO</strong>: Add meta tags, sitemap, and RSS feed.  </li>\n<li><strong>Accessibility audit</strong>: Make sure everyone can enjoy the site.</li>\n</ul>\n<hr />\n<p>That’s the gist of how I turned a static landing page into a fully‑functional, self‑hosted blog powered by Next.js. Stay tuned for more posts—both about the tech and the \nthings I’m learning along the way!</p>"
  }
]